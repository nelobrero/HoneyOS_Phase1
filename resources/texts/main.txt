let codeEditor;
let camera;
let minimized;
let maximized;
let currentFileHandle;
let isFileSaved = true;
let editorHistory = [];
let currentHistoryIndex = -1;
let lastSavedContent = '';
let saveInterval = 2000; // Save every 2 seconds
let fileManager;

function onWindowClose() {
  Neutralino.app.exit();
}

Neutralino.init();
Neutralino.events.on("windowClose", onWindowClose);

document.addEventListener("DOMContentLoaded", function () {
  setTimeout(function () {
    const splashScreen = document.getElementById("splash-screen");
    splashScreen.style.transition = "opacity 1s ease-out";
    splashScreen.style.opacity = 0;
    setTimeout(function () {
      window.location.href = "index2.html";
    }, 1000);
  }, 500);

  const textEditorHexagon = document.querySelector('.hexagon-wrapper:nth-child(1) .hexagon');
  const fileExplorerHexagon = document.querySelector('.hexagon-wrapper:nth-child(2) .hexagon');
  const cameraHexagon = document.querySelector('.hexagon-wrapper:nth-child(3) .hexagon');
  const closeFileHexagon = document.querySelector('.hexagon-wrapper:nth-child(4) .hexagon');

  textEditorHexagon.addEventListener('click', createNewFile);
  fileExplorerHexagon.addEventListener('click', openFile);
  cameraHexagon.addEventListener('click', openCamera);
  closeFileHexagon.addEventListener('click', closeFile);

  const editorTask = document.getElementById('editor-task');
  editorTask.addEventListener('click', toggleEditor);
});

function toggleEditor() {
  minimized = !minimized;
  const editorContainer = document.getElementById('editor-container');
  const hexagonContainer = document.querySelector('.hexagon-container');

  if (editorContainer.classList.contains('hidden')) {
    // Editor is hidden, show it
    editorContainer.classList.remove('hidden');
    hexagonContainer.classList.add('hidden');
  } else {
    // Editor is visible, minimize it
    editorContainer.classList.add('hidden');
    hexagonContainer.classList.remove('hidden');
  }

  // Ensure taskbar is always visible
  const taskbar = document.getElementById('taskbar');
  taskbar.classList.remove('hidden'); // Remove hidden class if present
}


function createCodeEditor() {

  const editorContainer = document.getElementById('editor-container');
  codeEditor = document.getElementById('code-editor');

  const newFileIcon = document.getElementById('new-file');
  const openFileIcon = document.getElementById('open-file');
  const saveFileIcon = document.getElementById('save-file');
  const saveFileAsIcon = document.getElementById('save-file-as');
  const undoIcon = document.getElementById('undo');
  const redoIcon = document.getElementById('redo');
  const micIcon = document.getElementById('micButton');
  const closeFileIcon = document.getElementById('close-file');
  const minimizeIcon = document.getElementById('minimize');
  const maximizeIcon = document.getElementById('max');

  newFileIcon.addEventListener('click', createNewFile);
  openFileIcon.addEventListener('click', openFile);
  saveFileIcon.addEventListener('click', saveFile);
  saveFileAsIcon.addEventListener('click', saveFileAs);
  undoIcon.addEventListener('click', undo);
  redoIcon.addEventListener('click', redo);
  micIcon.addEventListener('click', speechToText);
  closeFileIcon.addEventListener('click', closeFile);
  minimizeIcon.addEventListener('click', minimizeEditor);
  maximizeIcon.addEventListener('click', max);

  editorContainer.classList.remove('hidden');

  const hexagonContainer = document.querySelector('.hexagon-container');
  hexagonContainer.classList.add('hidden');

  const taskbar = document.getElementById('taskbar');
  taskbar.classList.remove('hidden'); // Show the taskbar

  // Ensure default dimensions are applied
  editorContainer.style.width = '50%';
  editorContainer.style.height = '80%';
  editorContainer.style.top = '50%';
  editorContainer.style.left = '50%';
  editorContainer.style.transform = 'translate(-50%, -50%)';


  // Initialize button states
  updateSaveButton();
  updateUndoRedoButtons();

  // Modify the codeEditor input event listener to update button states
  codeEditor.addEventListener('input', function () {
    isFileSaved = false;
    codeEditor.style.backgroundColor = 'lightgray';

    // Update button states
    updateSaveButton();
    updateUndoRedoButtons();
  });

  // Add keyboard event listener for undo and redo
  codeEditor.addEventListener('keydown', function (event) {
    if (event.ctrlKey && event.key === 'z') {
      event.preventDefault();
      undo();
    } else if (event.ctrlKey && event.key === 'y') {
      event.preventDefault();
      redo();
    }
  });

  // Save changes periodically
  setInterval(saveChanges, saveInterval);
}

function updateSaveButton() {
  const saveFileIcon = document.getElementById('save-file');
  if (isFileSaved) {
    saveFileIcon.classList.add('grayed-out');
  } else {
    saveFileIcon.classList.remove('grayed-out');
  }
}

function updateUndoRedoButtons() {
  const undoIcon = document.getElementById('undo');
  const redoIcon = document.getElementById('redo');

  if (currentHistoryIndex <= 0) {
    undoIcon.classList.add('grayed-out');
  } else {
    undoIcon.classList.remove('grayed-out');
  }

  if (currentHistoryIndex >= editorHistory.length - 1) {
    redoIcon.classList.add('grayed-out');
  } else {
    redoIcon.classList.remove('grayed-out');
  }
}

function saveChanges() {
  const currentContent = codeEditor.value;
  if (currentContent !== lastSavedContent) {
    lastSavedContent = currentContent;
    editorHistory = editorHistory.slice(0, currentHistoryIndex + 1);
    editorHistory.push(currentContent);
    currentHistoryIndex = editorHistory.length - 1;

    updateUndoRedoButtons();
  }
}

function removeCodeEditor() {
  const editorContainer = document.getElementById('editor-container');
  codeEditor.value = '';
  currentFileHandle = null;
  isFileSaved = true;
  editorContainer.classList.add('hidden');

  const hexagonContainer = document.querySelector('.hexagon-container');
  hexagonContainer.classList.remove('hidden');

  const taskbar = document.getElementById('taskbar');
  taskbar.classList.add('hidden');
}

function createNewFile() {
  minimized = false;
  maximized = false;
  if (!isFileSaved) {
    let userResponse = confirm('You have unsaved changes in the current file. They will be lost if you create a new file. Do you want to proceed?');
    if (!userResponse) {
      return;
    }
  }

  if (codeEditor) {
    codeEditor.value = '';
  }

  createCodeEditor();
  codeEditor.style.backgroundColor = 'lightgray';
  currentFileHandle = null;

  isFileSaved = true;

  // Reset editor history
  editorHistory = [''];
  currentHistoryIndex = 0;
  lastSavedContent = '';

  updateSaveButton();
  updateUndoRedoButtons();
}

async function openFile() {
  fileManager = true;
  if (codeEditor && !isFileSaved) {
    const confirmOpen = confirm('Are you sure you want to open a new file without saving the current file?');
    if (!confirmOpen) {
      return;
    }
  }

  try {
    const selectedFile = await Neutralino.os.showOpenDialog();

    if (selectedFile && selectedFile.length > 0) {
      const filePath = selectedFile[0];
      const content = await Neutralino.filesystem.readFile(filePath);

      if (!codeEditor) {
        createCodeEditor();
      }

      codeEditor.value = content;
      currentFileHandle = filePath;
      codeEditor.style.backgroundColor = 'white';
      isFileSaved = true;

      console.log('File opened successfully');

      // Reset editor history
      editorHistory = [content];
      currentHistoryIndex = 0;
      lastSavedContent = content;

      updateSaveButton();
      updateUndoRedoButtons();
    }
  } catch (err) {
    console.error('Failed to open file:', err);
  }
  fileManager = false;
}

async function saveFile() {
  if (codeEditor) {
    const content = codeEditor.value;
    try {
      if (currentFileHandle) {
        await Neutralino.filesystem.writeFile(currentFileHandle, content);
        codeEditor.style.backgroundColor = 'white';
        isFileSaved = true;
      } else {
        const selectedFile = await Neutralino.os.showSaveDialog();
        if (selectedFile) {
          await Neutralino.filesystem.writeFile(selectedFile, content);
          currentFileHandle = selectedFile;
          codeEditor.style.backgroundColor = 'white';
          isFileSaved = true;
        }
      }

      lastSavedContent = content;
      updateSaveButton();
      updateUndoRedoButtons();
    } catch (err) {
      console.error('Failed to save file:', err);
    }
  } else {
    alert('No file is currently open.');
  }
}

async function saveFileAs() {
  const content = codeEditor.value;
  try {
    const selectedFile = await Neutralino.os.showSaveDialog();
    if (selectedFile) {
      await Neutralino.filesystem.writeFile(selectedFile, content);
      currentFileHandle = selectedFile;
      codeEditor.style.backgroundColor = 'white';
      isFileSaved = true;

      lastSavedContent = content;
      updateSaveButton();
      updateUndoRedoButtons();
    }
  } catch (err) {
    console.error('Failed to save file:', err);
  }
}

async function closeFile() {
  if (codeEditor) {
    if (!isFileSaved) {
      const confirmClose = confirm('Are you sure you want to exit without saving the file?');
      if (confirmClose) {
        removeCodeEditor();
      } else {
        return;
      }
    } else {
      removeCodeEditor();
    }
  }
  codeEditor = false
}

async function undo() {
  if (currentHistoryIndex > 0) {
    currentHistoryIndex--;
    const content = editorHistory[currentHistoryIndex];
    codeEditor.value = content;
    codeEditor.style.backgroundColor = 'lightgray';
    isFileSaved = false;
    lastSavedContent = content;

    updateSaveButton();
    updateUndoRedoButtons();
  }
}

async function redo() {
  if (currentHistoryIndex < editorHistory.length - 1) {
    currentHistoryIndex++;
    const content = editorHistory[currentHistoryIndex];
    codeEditor.value = content;
    codeEditor.style.backgroundColor = 'lightgray';
    isFileSaved = false;
    lastSavedContent = content;

    updateSaveButton();
    updateUndoRedoButtons();
  }
}

async function speechToText() {
}

function minimizeEditor() {
  minimized = true
  const editorContainer = document.getElementById('editor-container');
  editorContainer.classList.add('hidden');

  const hexagonContainer = document.querySelector('.hexagon-container');
  hexagonContainer.classList.remove('hidden');

  const taskbar = document.getElementById('taskbar');
  taskbar.classList.remove('hidden');
}

function maximizeEditor() {
  const editorContainer = document.getElementById('editor-container');
  const hexagonContainer = document.querySelector('.hexagon-container');
  const taskbar = document.getElementById('taskbar');

  if (editorContainer.classList.contains('hidden')) {
    // Editor is hidden, maximize it
    editorContainer.classList.remove('hidden');
    taskbar.classList.add('hidden'); // Hide taskbar (optional)
  } else {
    // Editor is visible, minimize it
    editorContainer.classList.add('hidden');
    hexagonContainer.classList.remove('hidden');
    taskbar.classList.remove('hidden'); // Show taskbar (optional)
  }
}

let isFullScreen = false;
let defaultWidth, defaultHeight;

function max() {
  const editorContainer = document.getElementById("editor-container");
  const taskbar = document.getElementById("taskbar");

  if (!isFullScreen) {
    // Save default dimensions if not already saved
    if (!defaultWidth && !defaultHeight) {
      defaultWidth = editorContainer.style.width;
      defaultHeight = editorContainer.style.height;
    }

    // Save current position before expanding
    const currentPositionX = parseFloat(editorContainer.style.left);
    const currentPositionY = parseFloat(editorContainer.style.top);

    // Maximize editor
    editorContainer.style.width = "100vw"; // Set width to viewport width
    editorContainer.style.height = "100vh"; // Set height to viewport height
    editorContainer.style.left = "0";
    editorContainer.style.top = "0";
    editorContainer.style.transform = "none"; // Remove transform to ensure it fits the screen

    isFullScreen = true;
  } else {
    // Restore default dimensions and position
    editorContainer.style.width = defaultWidth || "50%";
    editorContainer.style.height = defaultHeight || "80%";
    editorContainer.style.left = "50%";
    editorContainer.style.top = "50%";
    editorContainer.style.transform = "translate(-50%, -50%)";

    isFullScreen = false;
  }
}

function openCamera() {
  camera = true;
  if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
    var constraints = { video: true };
    let cameraOpen = true;

    navigator.mediaDevices.getUserMedia(constraints)
      .then(function (stream) {
        var cameraContainer = document.createElement('div');
        cameraContainer.className = 'camera-container';
        cameraContainer.style.position = 'fixed';
        cameraContainer.style.top = '50%';
        cameraContainer.style.left = '50%';
        cameraContainer.style.transform = 'translate(-50%, -50%)';
        cameraContainer.style.width = '80%';
        cameraContainer.style.height = '80%';
        cameraContainer.style.zIndex = '9999';
        cameraContainer.style.backgroundColor = '#ffc700'; // Set background color to yellow
        cameraContainer.style.border = '2px solid black'; // Enclose in a rectangle box
        document.body.appendChild(cameraContainer);

        var videoElement = document.createElement('video');
        videoElement.srcObject = stream;
        videoElement.play();
        videoElement.style.transform = 'scaleX(-1)';
        videoElement.style.width = '100%';
        videoElement.style.height = 'calc(100% - 80px)'; // Adjusted height to not overlap with capture button
        videoElement.style.objectFit = 'cover';
        cameraContainer.appendChild(videoElement);

        var captureButton = document.createElement('div');
        captureButton.style.position = 'absolute';
        captureButton.style.bottom = '10px';
        captureButton.style.left = '50%';
        captureButton.style.transform = 'translateX(-50%)';
        captureButton.style.width = '60px';
        captureButton.style.height = '60px';
        captureButton.style.borderRadius = '50%';
        captureButton.style.backgroundColor = 'white';
        captureButton.style.display = 'flex';
        captureButton.style.justifyContent = 'center';
        captureButton.style.alignItems = 'center';
        captureButton.style.cursor = 'pointer';
        cameraContainer.appendChild(captureButton);

        var captureIcon = document.createElement('img');
        captureIcon.src = 'img/camera-icon.png'; 
        captureIcon.style.width = '40px';
        captureIcon.style.height = '40px';
        captureButton.appendChild(captureIcon);

        var exitIcon = document.createElement('img');
        exitIcon.src = 'img/exit-icon.png'; 
        exitIcon.style.position = 'absolute';
        exitIcon.style.top = '20px';
        exitIcon.style.right = '20px';
        exitIcon.style.width = '30px';
        exitIcon.style.height = '30px';
        exitIcon.style.cursor = 'pointer';
        cameraContainer.appendChild(exitIcon);

        var previewImage = document.createElement('img');
        previewImage.style.display = 'none';
        previewImage.style.transform = 'scaleX(-1)'
        previewImage.style.width = '100%';
        previewImage.style.height = '100%';
        previewImage.style.objectFit = 'cover';
        previewImage.style.cursor = 'pointer';
        cameraContainer.appendChild(previewImage);

        var backIcon = document.createElement('img');
        backIcon.src = 'img/back-icon.png'; 
        backIcon.style.display = 'none';
        backIcon.style.position = 'absolute';
        backIcon.style.top = '20px';
        backIcon.style.left = '20px';
        backIcon.style.width = '30px';
        backIcon.style.height = '30px';
        backIcon.style.cursor = 'pointer';
        cameraContainer.appendChild(backIcon);

        var smallPreviewImage = document.createElement('img');
        smallPreviewImage.style.display = 'none';
        smallPreviewImage.style.position = 'absolute';
        smallPreviewImage.style.bottom = '20px';
        smallPreviewImage.style.right = '20px';
        smallPreviewImage.style.width = '120px';
        smallPreviewImage.style.height = '90px';
        smallPreviewImage.style.objectFit = 'cover';
        smallPreviewImage.style.border = '2px solid white';
        smallPreviewImage.style.cursor = 'pointer';
        cameraContainer.appendChild(smallPreviewImage);

        captureButton.addEventListener('click', function () {
          var canvas = document.createElement('canvas');
          canvas.width = videoElement.videoWidth;
          canvas.height = videoElement.videoHeight;
          var context = canvas.getContext('2d');
          context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);

          canvas.toBlob(async function (blob) {
            const fileName = `C:\\Users\\Nelwhyeth Obrero\\HoneyV1\\camPics\\capture_${Date.now()}.png`; // Edit this path to change the save location and file name format
            await Neutralino.filesystem.writeBinaryFile(fileName, blob);

            smallPreviewImage.src = URL.createObjectURL(blob);
            smallPreviewImage.style.display = 'block';
          }, 'image/png');
        });

        smallPreviewImage.addEventListener('click', function () {
          previewImage.src = smallPreviewImage.src;
          previewImage.style.display = 'block';
          videoElement.style.display = 'none';
          captureButton.style.display = 'none';
          smallPreviewImage.style.display = 'none';
          backIcon.style.display = 'block';
          exitIcon.style.display = 'none'; // Hide exit button when preview is clicked
        });

        previewImage.addEventListener('click', function () {
          previewImage.style.display = 'none';
          videoElement.style.display = 'block';
          captureButton.style.display = 'flex';
          smallPreviewImage.style.display = 'block';
          backIcon.style.display = 'none';
          exitIcon.style.display = 'block'; // Show exit button when returning to live cam
        });

        backIcon.addEventListener('click', function () {
          previewImage.style.display = 'none';
          videoElement.style.display = 'block';
          captureButton.style.display = 'flex';
          smallPreviewImage.style.display = 'block';
          backIcon.style.display = 'none';
          exitIcon.style.display = 'block'; // Show exit button when returning to live cam
        });

        exitIcon.addEventListener('click', function () {
          camera = false;
          // Stop all tracks in the stream
          stream.getTracks().forEach(function(track) {
            track.stop();
          });
        
          // Remove the camera container from the DOM
          cameraContainer.parentNode.removeChild(cameraContainer);
        });
      })
      .catch(function (error) {
        console.error('Error accessing camera:', error);
      });
  } else {
    alert('getUserMedia is not supported by your browser');
  }
}

function shutdown() {
  // Ask for confirmation
  const confirmed = window.confirm("Are you sure you want to shut down?");

  // If user confirms, proceed with shutdown process
  if (confirmed) {
    // Load shutdown.html dynamically
    const xhr = new XMLHttpRequest();
    xhr.open('GET', 'shutdown.html', true);
    xhr.onreadystatechange = function () {
      if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {
        // Create a div element and set its innerHTML to the content of shutdown.html
        const div = document.createElement('div');
        div.innerHTML = xhr.responseText;
        // Set styles for the div
        div.style.position = 'fixed';
        div.style.top = '0';
        div.style.left = '0';
        div.style.width = '100%';
        div.style.height = '100%';
        div.style.backgroundColor = 'rgba(0,0,0)';
        div.style.zIndex = '9999';
        div.style.display = 'flex';
        div.style.justifyContent = 'center';
        div.style.alignItems = 'center';
        // Append the div to the body
        document.body.appendChild(div);

        // // Play the sound
        // const audio = new Audio("sfx/shutdown.mp3"); // Replace 'path/to/sound.mp3' with the actual path to your sound file
        // audio.play();

        // Set a timeout to execute Neutralino.app.exit() after 5 seconds
        setTimeout(function () {
          // Remove the shutdown splash screen
          div.parentNode.removeChild(div);
          // Exit the application
          Neutralino.app.exit();
        }, 4000); // 5000 milliseconds = 5 seconds
      }
    };
    xhr.send();
  }
}

const shutdownButton = document.getElementById("shutdown-button");
shutdownButton.addEventListener("click", shutdown);

let isDragging = false;
let initialMouseX, initialMouseY;
let initialEditorX, initialEditorY;

document
  .getElementById("editor-container")
  .addEventListener("mousedown", startDragging);
document.addEventListener("mousemove", drag);
document.addEventListener("mouseup", stopDragging);

function startDragging(event) {
  isDragging = true;
  initialMouseX = event.clientX;
  initialMouseY = event.clientY;
  const editorContainer = document.getElementById("editor-container");
  const style = window.getComputedStyle(editorContainer);
  initialEditorX = parseFloat(style.left);
  initialEditorY = parseFloat(style.top);
}

function drag(event) {
  if (!isDragging) return;
  const dx = event.clientX - initialMouseX;
  const dy = event.clientY - initialMouseY;
  const editorContainer = document.getElementById("editor-container");
  editorContainer.style.left = initialEditorX + dx + "px";
  editorContainer.style.top = initialEditorY + dy + "px";
}

function stopDragging() {
  isDragging = false;
}

document.getElementById('code-editor').addEventListener('mousedown', function(event) {
  event.stopPropagation();
})


window.onload = function() {
    const container = document.getElementById('hexagon-container7');
    const screenWidth = window.innerWidth;
    const screenHeight = window.innerHeight;
    const hexWidth = 100; // Width of hexagon
    const hexHeight = 78; // Height of hexagon
    const hexMarginX = 0; // Horizontal margin between hexagons
    const hexMarginY = 20; // Vertical margin between hexagons
    const sideLength = hexHeight / 2;
    let isDarkMode = false; // Flag to track the mode

    // Function to toggle mode
    // Function to toggle mode
    function toggleMode() {
        const body = document.body;
        const drawer = document.querySelector('.drawer');
        isDarkMode = !isDarkMode;
        body.classList.toggle('light-mode', !isDarkMode); // Add light-mode class if not in dark mode
        body.classList.toggle('dark-mode', isDarkMode); // Add dark-mode class if in dark mode
    
        // Update hexagon colors based on mode
        const hexagons = document.querySelectorAll('.hexagon7');
        hexagons.forEach(hexagon => {
            hexagon.classList.toggle('light-mode-hexagon', !isDarkMode);
            hexagon.classList.toggle('dark-mode-hexagon', isDarkMode);
        });
    
        // Update button text
        const modeToggleButton = document.getElementById('mode-toggle-button');
        modeToggleButton.textContent = isDarkMode ? '' : 'Light Mode';

    }
    

    // function shutdown() {
    //     Neutralino.app.exit();
    // }

    // Update drawer background color based on mode
    if (isDarkMode) {
        drawer.style.setProperty('background-color', '#1f1f1f');
    } else {
        drawer.style.removeProperty('background-color');
    }


    // Calculate the number of hexagons in a row and column
    const hexagonsPerRow = Math.ceil(screenWidth / (sideLength * 3 + hexMarginX)) + 1;
    const numRows = Math.ceil(screenHeight / (hexHeight + hexMarginY)) + 1;

    // Calculate the number of hexagons to fill the left side of the screen
    const numHexagonsLeft = Math.ceil(screenWidth / (hexWidth + hexMarginX));

    // Calculate the number of hexagons to fill the top of the screen
    const numHexagonsTop = Math.ceil(screenHeight / (hexHeight + hexMarginY));

    // Generate hexagons
    for (let row = 0; row < numRows + numHexagonsTop; row++) {
        for (let col = 0; col < hexagonsPerRow + numHexagonsLeft; col++) {
            const hexagon = document.createElement('div');
            hexagon.classList.add('hexagon7');
            const x = col * (sideLength * 3 + hexMarginX) - numHexagonsLeft * (hexWidth + hexMarginX) + (row % 2) * (sideLength * 1.5 + hexMarginX);
            const y = row * (hexHeight + hexMarginY) - numHexagonsTop * (hexHeight + hexMarginY);
            hexagon.style.left = `${x}px`;
            hexagon.style.top = `${y}px`;
            container.appendChild(hexagon);
        }
    }



    // Event listener for button click to toggle mode
    const toggleButton = document.getElementById('toggle-button');
    toggleButton.addEventListener('click', toggleMode);

    const shutdownButton = document.getElementById('shutdown-button');
    shutdownButton.addEventListener('click', shutdown);
};


function enableSpeechToText() {
  // Check if speech recognition is supported
  if ('webkitSpeechRecognition' in window) {
    // Create speech recognition object
    var recognition = new webkitSpeechRecognition();
    // Set options
    recognition.continuous = false; // Stop recognizing when user stops speaking
    recognition.interimResults = false; // Get final results only
    recognition.lang = 'en-US'; // Specify language

    // Start speech recognition
    recognition.start();

    // Event listener for result
    recognition.onresult = function (event) {
      var result = event.results[0][0].transcript + ' ';
      // Append result to textarea
      var textarea = document.getElementById('code-editor');
      textarea.value += result;
      textarea.style.backgroundColor = 'lightgray';
      isFileSaved = false;
    updateSaveButton();
    };

    

    // Event listener for end
    recognition.onend = function () {
      console.log('Speech recognition ended.');
    };
  } else {
    alert('Speech recognition is not supported in this browser.');
  }
}

document.getElementById('micButton').addEventListener('click', enableSpeechToText);